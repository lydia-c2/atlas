""" database dependencies to support sqliteDB examples """
from random import randrange
import os, base64
import json

from __init__ import app, db
from sqlalchemy.exc import IntegrityError


# Define the Review class to manage actions in the 'reviews' table
class Review(db.Model):
    __tablename__ = 'reviews2' 

    # Define the Review schema with "vars" from object
    id = db.Column(db.Integer, primary_key=True)
    _school = db.Column(db.String(255), unique=False, nullable=False)
    _review = db.Column(db.Text, unique=True, nullable=False)
    _score = db.Column(db.Integer, unique=False, nullable=False)

    # constructor of a Review object, initializes the instance variables within object (self)
    def __init__(self, school, review, score):
        self._school = school    # variables with self prefix become part of the object, 
        self._review = review
        self._score = score

    # a name getter method, extracts name from object
    @property
    def school(self):
        return self._school
    
    # a setter function, allows name to be updated after initial object creation
    @school.setter
    def school(self, school):
        self._school = school

    @property
    def score(self):
        return self._score
    
    @score.setter
    def score(self, score):
        self._score = score
    
    @property
    def review(self):
        return self._review
    
    @review.setter
    def review(self, review):
        self._review = review
        
    def is_review(self, review):
        return self._review == review
    
    @property
    def __str__(self):
        return json.dumps(self.read())

    def create(self):
        try:
            # creates a person object from Review(db.Model) class, passes initializers
            db.session.add(self)  # add prepares to persist person object to Reviews table
            db.session.commit()  # SqlAlchemy "unit of work pattern" requires a manual commit
            return self
        except IntegrityError:
            db.session.remove()
            return None

    # CRUD read converts self to dictionary
    # returns dictionary
    def read(self):
        return {
            "id": self.id,
            "school": self.school,
            "review": self.review,
            "score": self.score
        }

    # CRUD update: updates review name, password, phone
    # returns self
    def update(self, school="", review="", score=""):
        """only updates values with length"""
        if len(review) > 0:
            self.review = review
        if len(review) > 0:
            self.review = review
        if len(school) > 0:
            self.school = school
        if len(school) > 0:
            self.school = school
        if len(score) > 0:
            self.score = score
        if len(score) > 0:
            self.score = score
        db.session.commit()
        return self

    # CRUD delete: remove self
    # None
    def delete(self):
        db.session.delete(self)
        db.session.commit()
        return None

"""Database Creation and Testing """

def initReviews():
    with app.app_context():
        """Create database and tables"""
        # db.init_app(app)
        db.create_all()
        """Tester data for table"""
        u1 = Review(school='UCSD', review='Socially dead :(', score = '2')
        u2 = Review(school='UCSD', review='Great engineering program', score = '2')
        u3 = Review(school='UCI', review='Go anteaters!!!!!!!!!', score = '9')
        u4 = Review(school='UCM', review='Nothing fun to do at all around.', score = '7')
        u5 = Review(school='UCSB', review='Party School!!!!', score = '8')
        u6 = Review(school='UCSC', review='Great program, my son goes here', score = '8')

        reviews = [u1, u2, u3, u4, u5, u6]

        """Builds sample reviews/note(s) data"""
        for review in reviews:
            try:
                '''add a few 1 to 4 notes per review'''
                for num in range(randrange(1, 4)):
                    note = "#### " + review.school + " note " + str(num) + ". \n Generated by test data."
                '''add review/post data to table'''
                review.create()
            except IntegrityError:
                '''fails with bad or duplicate data'''
                db.session.remove()
                print(f"Records exist, duplicate email, or error: {review.review}")